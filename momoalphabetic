START  
1. DEFINE Plaintext alphabet (A-Z).  
2. DEFINE Ciphertext alphabet (shuffled A-Z).  
3. INPUT plaintext.  
4. FOR each character in plaintext:  
     - FIND its position in the plaintext alphabet.  
     - REPLACE it with the corresponding character from the ciphertext alphabet.  
5. PRINT the encrypted text.  
6. TO DECRYPT: Reverse the process.  
STOP  


#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Define the plaintext and ciphertext alphabets
char plainAlphabet[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
char cipherAlphabet[] = "QWERTYUIOPASDFGHJKLZXCVBNM"; // Example shuffled alphabet

// Function to encrypt plaintext using the monoalphabetic cipher
void encrypt(char text[]) {
    for (int i = 0; text[i] != '\0'; i++) {
        if (isalpha(text[i])) {
            char upper = toupper(text[i]);  // Convert to uppercase
            for (int j = 0; j < 26; j++) {
                if (plainAlphabet[j] == upper) {
                    text[i] = islower(text[i]) ? tolower(cipherAlphabet[j]) : cipherAlphabet[j];
                    break;
                }
            }
        }
    }
}

// Function to decrypt ciphertext back to plaintext
void decrypt(char text[]) {
    for (int i = 0; text[i] != '\0'; i++) {
        if (isalpha(text[i])) {
            char upper = toupper(text[i]);  // Convert to uppercase
            for (int j = 0; j < 26; j++) {
                if (cipherAlphabet[j] == upper) {
                    text[i] = islower(text[i]) ? tolower(plainAlphabet[j]) : plainAlphabet[j];
                    break;
                }
            }
        }
    }
}

int main() {
    char text[100];

    printf("Enter plaintext: ");
    fgets(text, sizeof(text), stdin);
    text[strcspn(text, "\n")] = 0; // Remove newline character

    // Encrypt the input text
    encrypt(text);
    printf("Encrypted Text: %s\n", text);

    // Decrypt the encrypted text
    decrypt(text);
    printf("Decrypted Text: %s\n", text);

    return 0;
}
